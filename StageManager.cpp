//=============================================================================
//
// ステージ管理 [StageManager.cpp]
// Author : 宋彦霖
//
//=============================================================================
#include "StageManager.h"

#include "Library/DebugProcess.h"
#include "Library/Input.h"

#include "enemyRE.h"
#include "UIBonus.h"

#include "field.h"

#include "DefeatCounter.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 列挙型
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
void SetEnemy(int no);

void EnemySpawner(void);

void CheckChangeStage(void);
void NextStageEfx(void);
void NextStage(void);
void GameOver(void);

void CountUpTimer(void);

//*****************************************************************************
// グローバル変数
//*****************************************************************************
STAGE StageWk;		// ワーク

//=============================================================================
// 取得
//=============================================================================
STAGE *GetStage(void)
{
	return (&StageWk);
}

//=============================================================================
// 初期化処理
//=============================================================================
void InitStage(void)
{
	STAGE *s = GetStage();

	s->no = 0;

	s->timer = 0;
	s->nextStage = -1;

	s->freeze = TRUE;
	s->end = FALSE;

	SetEnemyRE(s->timer);
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateStage(void)
{
	// チェック
	CheckChangeStage();

	// エネミースポーン
	EnemySpawner();
	
	// カウントアップタイマー
	CountUpTimer();

}

//=============================================================================
// 凍結
//=============================================================================
void FreezeStage(void)
{
	STAGE *s = GetStage();

	s->freeze = TRUE;
}

//=============================================================================
// 解凍
//=============================================================================
void UnFreezeStage(void)
{
	STAGE *s = GetStage();

	s->freeze = FALSE;
}

//=============================================================================
// エネミーの生成
//=============================================================================
void EnemySpawner(void)
{
	ENEMY *e = GetEnemyRE(0);
	STAGE *s = GetStage();

	for (int i = 0; i < ENEMY_MAX; i++)
	{
		if (s->timer == (e + i)->apr)
		{
			EnemyREOnStage(i);
		}
	}
}

//=============================================================================
// 時間軸チェック（ステージ遷移関係）
//=============================================================================
void CheckChangeStage(void)
{
	DefeatCounter *DefeatCounter = GetDefeatCounter(0);
	int CheckDefeat = GetAllDefeat();

	STAGE *stage = GetStage();

	if (CheckDefeat == 10)
	{
		NextStageEfx();
	}

	if (CheckDefeat == 25)
	{
		NextStageEfx();
	}

	if (stage->timer == stage->nextStage)
	{
		NextStage();
	}

	if (stage->timer >= 5400)
	{
		GameOver();
	}

}

//=============================================================================
// 次のステージに移行（演出効果）
//=============================================================================
void NextStageEfx(void)
{
	STAGE *stage = GetStage();

	stage->nextStage = stage->timer + 120;

	ClearAllEnemyRE();
}

//=============================================================================
// 次のステージに移行
//=============================================================================
void NextStage(void)
{
	STAGE *stage = GetStage();

	stage->no += 1;
	stage->no %= 3;
	SetFeildTex(stage->no);

	ResetAllEnemyRE();
	SetEnemyRE(stage->timer);
}

//=============================================================================
// ゲームオーバー
//=============================================================================
void GameOver(void)
{
	STAGE *stage = GetStage();

	stage->end = true;
}

//=============================================================================
// カウントアップタイマー
//=============================================================================
void CountUpTimer(void)
{
	STAGE *stage = GetStage();

	if (stage->end != true)
	{
		stage->timer++;
	}
}